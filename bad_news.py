import random
import string


# TODO LIST GRAVESTONES IN THE CEMETERY


NUMERAL_TO_WORD = {
    1: 'one', 2: 'two', 3: 'three', 4: 'four', 5: 'five',
    6: 'six', 7: 'seven', 8: 'eight', 9: 'nine', 10: 'ten',
    11: 'eleven', 12: 'twelve', 13: 'thirteen', 14: 'fourteen',
    15: 'fifteen', 16: 'sixteen', 17: 'seventeen',
    18: 'eighteen', 19: 'nineteen', 20: 'twenty',
}


class GameplayInstance(object):
    """A Bad News gameplay instance."""

    def __init__(self, sim):
        """Initialize a GameplayInstance object."""
        self.sim = sim  # A city simulation generated by game.py
        self.city = sim.city
        self.dead_character = self.prepare_dead_character()

    def prepare_dead_character(self):
        """
        """
        pass


class Player(object):
    """A collection of data and affordances surrounding a player's interaction with a Bad News game world."""

    def __init__(self, game):
        """Initialize a Player object."""
        self.game = game
        self.game.sim = game  # FOR TESTING ONLY -- TODO DELETE!
        self.city = game.city
        # self.location = self.game.dead_character.home
        self.location = random.choice(list(self.city.blocks))
        self.outside = True
        self.people_i_know_by_name = set()
        self.houses_i_know_by_name = set()
        self.salient_person_who_lives_in_a_house = {}
        self.last_address_i_heard = None
        self.last_unit_number_i_heard = None
        self.last_block_i_heard = None
        self.set_scene()

    @property
    def buildings_on_this_block(self):
        """Return a list of the buildings on the player's current block."""
        block = self.location if self.location.type == 'block' else self.location.block
        return [b for b in self.city.buildings if b.block is block]

    def goto(self, address=None):
        """Move the player to a location with the given address.

        If no location exists at this address, move them simply to the associated block.
        """
        if not address:
            address = self.last_address_i_heard
        try:
            if ' (Unit' in address:
                address = address.split(' (Unit')[0]
            house_number = int(address[:3])
            street_object = self._find_street_object(address)
            self.location = next(
                b for b in self.city.buildings if b.house_number == house_number and
                b.block.street is street_object
            )
            self.outside = True
            self.set_scene()
        except StopIteration:
            # Arrive then at that block
            house_number = int(address[:3])
            block_number = int(address[0] + '00')
            street_object = self._find_street_object(address)
            block_object = next(b for b in self.city.blocks if b.number == block_number and b.street is street_object)
            print "Arriving at the {}, you find no building with the house number {}.\n".format(
                block_object, house_number
            )
            self.goto_block(block=block_object)

    def _find_street_object(self, address):
        """Complete a potentially abridged street name."""
        street_name = address[4:].lower()
        if street_name[-3:] == "ave":
            street_name += 'nue'
        elif street_name[-4:] == "ave.":
            street_name = street_name[:-1] + 'nue'
        elif street_name[-2:] == 'st':
            street_name += 'reet'
        elif street_name[-4:] == "st.":
            street_name = street_name[:-1] + 'reet'
        street_object = next(s for s in self.city.streets if s.name.lower() == street_name.lower())
        return street_object

    def goto_block(self, block=None):
        """Move the character to the given block."""
        if not block:
            block = self.last_block_i_heard
        if type(block) == str:
            block = next(b for b in self.city.blocks if str(block) == block)
        self.location = block
        self.outside = True
        self.set_scene()

    def approach(self, house_number):
        """Move the player to the building on her current block with the given house number."""
        if self.location.__class__.__name__ != 'Block':
            self.location = self.location.block
        try:
            building_to_approach = next(b for b in self.location.buildings if b.house_number == house_number)
        except StopIteration:
            raise InvalidAddressException(
                "There is no building on this block with the house number {}".format(house_number)
            )
        self.location = building_to_approach
        self.outside = True
        self.set_scene()

    def approach_apt(self, unit_number=None):
        """Move the player to the unit of the apartment she is currently outside with the given unit number."""
        if not unit_number:
            unit_number = self.last_unit_number_i_heard
        self.location = self.location.units[unit_number]
        self.outside = True  # Make sure elsewhere to check for outside + location being an apartment unit
        self.set_scene()

    def enter(self, house_number=None):
        """Enter a building."""
        if not house_number:
            # Then attempt to enter the building you are outside of
            if not self.location.locked:
                self.outside = False
                self.set_scene()
            else:
                print 'The door is locked.'
        else:
            if self.location.__class__.__name__ != 'Block':
                self.location = self.location.block
            building_to_approach = next(b for b in self.location.buildings if b.house_number == house_number)
            self.location = building_to_approach
            if not self.location.locked:
                self.outside = False
                self.set_scene()
            else:
                print 'The door is locked.'

    def enter_apt(self, unit_number=None):
        """Enter a building."""
        if not unit_number:
            # Then attempt to enter the apartment unit you are standing outside of
            if not self.location.locked:
                self.outside = False
                self.set_scene()
            else:
                print 'The door is locked.'
        else:
            if self.location.__class__.__name__ != 'ApartmentComplex':
                self.location = self.location.complex
            apartment_unit_to_approach = next(a for a in self.location.units if a.unit_number == unit_number)
            self.location = apartment_unit_to_approach
            if not self.location.locked:
                self.outside = False
                self.set_scene()
            else:
                print 'The door is locked.'

    def exit(self):
        """Exit a building."""
        self.outside = True
        self.set_scene()

    def go_in_street(self):
        """Go into the street and the observe the block you are on."""
        self.outside = True
        self.location = self.location.block
        self.set_scene()

    def set_scene(self):
        """Describe the player's current setting."""
        if self.outside:  # Interior scenes
            if self.location.type == 'block':
                scene = self._describe_the_block_player_is_on()
            elif self.location.__class__.__name__ == 'House':
                scene = self._describe_the_house_player_is_outside_of()
            elif self.location.__class__.__name__ == 'Apartment':
                scene = self._describe_the_apartment_unit_player_is_outside_of()
            elif self.location.__class__.__name__ == 'ApartmentComplex':
                scene = self._describe_the_apartment_complex_the_player_is_outside_of()
            elif self.location.type == "business":
                scene = self._describe_the_business_the_player_is_outside_of()
        else:  # Exterior scenes
            if self.location.type == 'residence':
                scene = self._describe_the_interior_of_a_home_the_player_is_in()

        # if self.inside -- PRINT ALL THE PEOPLE THERE
        print "\n{}\n".format(scene)

    def _describe_the_block_player_is_on(self):
        """Describe the block that the player is on."""
        buildings_on_this_block = [lot.building for lot in self.location.lots if lot.building]
        if buildings_on_this_block:
            buildings_str = self._generate_description_of_buildings_on_this_block()
            if len(buildings_on_this_block) > 1:
                scene = "You are on the {}. There are {} buildings here:\n{}".format(
                    self.location, NUMERAL_TO_WORD[len(buildings_on_this_block)], buildings_str
                )
            else:
                scene = "You are on the {}. There is one building here:\n{}".format(
                    self.location, buildings_str
                )
        else:
            scene = "You are on the {}. There are no buildings here.".format(self.location)
        return scene

    def _generate_description_of_buildings_on_this_block(self):
        """Generate a pretty-printable description of buildings on the block the player is on."""
        description = ""
        buildings_on_this_block = [lot.building for lot in self.location.lots if lot.building]
        for building in buildings_on_this_block:
            description += '\n\t'
            if building.__class__.__name__ in ('Bar', 'Restaurant'):
                description += '{}\tA {} whose sign reads "{}"'.format(
                    building.lot.house_number, building.__class__.__name__.lower(), building.sign
                )
            elif building.__class__.__name__ == 'House':
                if self.game.sim.time_of_day == 'night':
                    lights_on = ' with its lights on' if building.people_here_now else ' with its lights off'
                else:
                    lights_on = ''
                if building in self.houses_i_know_by_name:
                    lights_on = ','+lights_on if lights_on else ''
                    "{}\t{}'s house{}".format(
                        building.lot.house_number, self.salient_person_who_lives_in_a_house[building].name,
                        lights_on
                    )
                else:
                    description += '{}\tA private residence{}'.format(
                        building.lot.house_number, lights_on
                    )
            else:  # A business that's not a bar or restaurant
                description += '{}\tA company whose sign reads "{}"'.format(
                    building.lot.house_number, building.sign
                )
        return description

    def _describe_the_house_player_is_outside_of(self):
        """Describe the house whose doorstep the player is standing on."""
        if self.location in self.houses_i_know_by_name:
            whose_house = "{person_i_know_lives_here}'s house".format(
                person_i_know_lives_here=self.salient_person_who_lives_in_a_house[self.location].name
            )
        else:
            whose_house = "a house"
        if len(self.location.people_here_now) > 3:
            noise_of_activity_inside = "a bustle of activity inside"
        elif self.location.people_here_now:
            noise_of_activity_inside = "a faint noise inside"
        else:
            noise_of_activity_inside = "nothing inside"
        if self.game.time_of_day == "night":
            scene = (
                "You are at the doorstep of {whose_house} at {address}. "
                "Its lights are {lights_on}, its door is {door_locked}, and you hear {noise_of_activity_inside}.".format(
                    whose_house=whose_house,
                    address=self.location.address,
                    lights_on="on" if self.location.people_here_now else "off",
                    door_locked="locked" if self.location.locked else "unlocked",
                    noise_of_activity_inside=noise_of_activity_inside
                )
            )
        else:
            scene = (
                "You are at the doorstep of {whose_house} at {address}. "
                "Its door is {door_locked} and you hear {noise_of_activity_inside}.".format(
                    whose_house=whose_house,
                    address=self.location.address,
                    door_locked="locked" if self.location.locked else "unlocked",
                    noise_of_activity_inside=noise_of_activity_inside
                )
            )
        return scene

    def _describe_the_apartment_unit_player_is_outside_of(self):
        """Describe the apartment unit whose door the player is standing at."""
        if self.location in self.houses_i_know_by_name:
            whose_apartment = "{person_i_know_lives_here}'s apartment, unit #{unit_number}".format(
                person_i_know_lives_here=self.salient_person_who_lives_in_a_house[self.location].name,
                unit_number=self.location.unit_number
            )
        else:
            whose_apartment = "unit #{unit_number}".format(unit_number=self.location.unit_number)
        if len(self.location.people_here_now) > 3:
            noise_of_activity_inside = "a bustle of activity inside"
        elif self.location.people_here_now:
            noise_of_activity_inside = "a faint noise inside"
        else:
            noise_of_activity_inside = "nothing"
        if self.location.locked and self.location.people_here_now:
            conjunction = ', but'
        else:
            conjunction = ' and'
        scene = (
            "You are in a hallway standing outside the door of {whose_apartment} of {apartment_complex}. "
            "Its door is {door_locked}{conjunction} you hear {noise_of_activity_inside}.".format(
                whose_apartment=whose_apartment,
                apartment_complex=self.location.complex.name,
                door_locked="locked" if self.location.locked else "unlocked",
                conjunction=conjunction,
                noise_of_activity_inside=noise_of_activity_inside
            )
        )
        return scene

    def _describe_the_apartment_complex_the_player_is_outside_of(self):
        """Describe the apartment complex, particularly its intercom system, that the player is outside of."""
        try:
            janitor_in_lobby = next(e for e in self.location.working_right_now if e[0] == 'janitor')
        except StopIteration:
            janitor_in_lobby = None
        if janitor_in_lobby:
            lobby_str = ", but there is a janitor in the lobby"
        else:
            lobby_str = " and the lobby is empty"
        scene = (
            "You are outside {complex_name} at {address}. Its entrance is locked{lobby_str}. There "
            "are {n_options} options listed on the intercom system:\n{intercom_index}".format(
                complex_name=self.location.name,
                address=self.location.address,
                lobby_str=lobby_str,
                n_options=len(self.location.units)+1,
                intercom_index=self._generate_apartment_complex_intercom_system_directory()
            )
        )
        return scene

    def _generate_apartment_complex_intercom_system_directory(self):
        """Describe the apartment complex's intercom system, listing units and names."""
        intercom_description = ""
        for unit in self.location.units:
            if unit.owners:
                all_surnames_among_owners = {owner.last_name for owner in unit.owners}
                owner_str = '/'.join(all_surnames_among_owners)
            else:
                owner_str = '--'
            intercom_description += '\n\t#{unit_no}\t{owners_surnames}'.format(
                unit_no=unit.unit_number,
                owners_surnames=owner_str
            )
        intercom_description += "\n\n\t#99\tOffice"
        return intercom_description

    def _describe_the_business_the_player_is_outside_of(self):
        """Describe the business a player is outside of."""
        if len(self.location.people_here_now) > 8:
            n_people_inside = "many people"
        elif len(self.location.people_here_now) > 4:
            n_people_inside = "several people"
        elif len(self.location.people_here_now) > 2:
            n_people_inside = "a few people"
        elif self.location.people_here_now:
            # A single person -- if it's a janitor, be more specific and
            # explicitly say that
            if self.location.working_right_now and self.location.working_right_now[0][0] == 'janitor':
                n_people_inside = "a janitor"
            else:
                n_people_inside = "a person"
        else:
            n_people_inside = "no one"
        if self.location.locked and self.location.people_here_now:
            conjunction = ', but'
        else:
            conjunction = ' and'
        scene = (
            "You are at the entrance of {business_name} at {address}. "
            "Its {gate_or_door} is {door_locked}{conjunction} you see {n_people_inside} "
            "{inside_or_on_premises}.".format(
                business_name=self.location.name,
                address=self.location.address,
                gate_or_door="gate" if self.location.lot.tract else "door",
                door_locked="locked" if self.location.locked else "unlocked",
                conjunction=conjunction,
                n_people_inside=n_people_inside,
                inside_or_on_premises="on the premises" if self.location.lot.tract else "inside"
            )
        )
        return scene

    def _describe_the_interior_of_a_home_the_player_is_in(self):
        """Describe the interior of a house that the player is in."""
        if self.location in self.houses_i_know_by_name:
            house_noun_phrase = "the {house_or_apartment} of {person_i_know_lives_here}".format(
                house_or_apartment="home" if self.location.house else "apartment",
                person_i_know_lives_here=self.salient_person_who_lives_in_a_house[self.location].name
            )
        else:
            house_noun_phrase = "a house".format(self.location.address)
        if len(self.location.people_here_now) > max(NUMERAL_TO_WORD):
            people_here_intro = "There are {number} people here:\n".format(
                len(self.location.people_here_now)
            )
        elif len(self.location.people_here_now) > 7:
            people_here_intro = "There are many people here:\n"
        elif len(self.location.people_here_now) > 1:
            people_here_intro = "There are {number_word} people here:\n".format(
                number_word=NUMERAL_TO_WORD[len(self.location.people_here_now)]
            )
        elif self.location.people_here_now:
            people_here_intro = "There is a single person here:\n"
        else:
            people_here_intro = "There is no one here."
        scene = (
            "You are inside {house_noun_phrase} at {address}. "
            "{people_here_intro}{people_present_description}".format(
                house_noun_phrase=house_noun_phrase,
                address=self.location.address,
                people_here_intro=people_here_intro,
                people_present_description=self._generate_description_of_the_people_at_a_residence()
            )
        )
        return scene

    def _generate_description_of_the_people_at_a_residence(self):
        """Describe the individuals currently situated in a residence that the player is in."""
        people_present_description = ""
        for person in self.location.people_here_now:
            if person in self.people_i_know_by_name:
                people_present_description += '\n\t{persons_name}'.format(person.name)
            else:
                people_present_description += '\n\t{} with {}'.format(
                    person.age_and_gender_description, person.basic_appearance_description
                ).capitalize()
        return people_present_description

    def ring(self):
        """Print exposition surrounding the ringing of a doorbell."""
        answerer = self._determine_who_answers_buzzer_or_doorbell(dwelling_place=self.location)
        if answerer in self.people_i_know_by_name:
            print '{} answers the door.'.format(answerer.name).capitalize()
        elif answerer:
            print '{} with {} answers the door.'.format(
                answerer.age_and_gender_description, answerer.basic_appearance_description
            ).capitalize()
        else:
            print 'No one answers.'

    def knock(self):
        """Print exposition surrounding the knocking of a house's door."""
        self.ring()

    def buzz(self, unit_number):
        """Print exposition surrounding the buzzing of an apartment unit."""
        self.last_unit_number_i_heard = unit_number
        if unit_number == 99:
            answerer = self._buzz_apartment_complex_office()
        else:
            apartment_unit_buzzed = self.location.units[unit_number-1]
            answerer = self._determine_who_answers_buzzer_or_doorbell(
                dwelling_place=apartment_unit_buzzed
            )
        if answerer:
            print '{} speaks into the intercom.'.format(
                answerer.age_and_gender_description
            ).capitalize()
        else:
            print 'No one answers.'

    def _buzz_apartment_complex_office(self):
        """Buzz the office of an apartment complex.

        If a secretary is working, they will answer; else, if a landlord is working, they
        will answer; else, no one will answer.
        """
        # This buzzes the office -- if a secretary or landlord is working,
        # have them answer
        try:
            answerer = next(e for e in self.location.working_right_now if e[0] == 'secretary')[1]
        except StopIteration:
            try:
                answerer = next(e for e in self.location.working_right_now if e[0] == 'landlord')[1]
            except StopIteration:
                answerer = None
        return answerer

    @staticmethod
    def _determine_who_answers_buzzer_or_doorbell(dwelling_place):
        """Return a random person who is here to come to the door."""
        if not dwelling_place.people_here_now:
            return None
        else:
            # See if any adults who live here are home -- if any are, return the most
            # extroverted person among them
            adults_who_live_here_who_are_home = [
                p for p in dwelling_place.people_here_now if p.adult and p.home is dwelling_place
            ]
            if adults_who_live_here_who_are_home:
                return max(adults_who_live_here_who_are_home, key=lambda q: q.personality.extroversion)
            else:
                # See if any adults are here, and if any are, return the most extroverted of them
                adults_here = [p for p in dwelling_place.people_here_now if p.adult]
                if adults_here:
                    return max(adults_here, key=lambda p: p.personality.extroversion)
                else:
                    # See if anyone who lives here and is at least five years old is home; if
                    # there is, return the oldest one
                    people_here_who_live_here = [
                        p for p in dwelling_place.people_here_now if p.home is dwelling_place and
                        p.age > 4
                    ]
                    if people_here_who_live_here:
                        return max(people_here_who_live_here, key=lambda p: p.age)
                    else:
                        # See if anyone above age 4 is here; if there is, return the oldest one
                        people_here_above_age_four = [
                            p for p in dwelling_place.people_here_now if p.age > 4
                        ]
                        if people_here_above_age_four:
                            return max(people_here_above_age_four, key=lambda p: p.age)
                        else:
                            return None


class InvalidAddressException(StopIteration):
    """An exception that is raised when the player attempts to approach or enter an invalid address."""

    def __init__(self, message):
        """Initialize an InvalidAddressException."""
        self.message = message